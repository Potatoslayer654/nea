import tkinter as tk
from tkinter import ttk
from Network import Network
import random
CELL_SIZE = 50  # Size of each grid cell in pixels


def drag_start(event):
    widget = event.widget
    widget.startX = event.x
    widget.startY = event.y
    widget.original_row = widget.grid_info()['row']
    widget.original_column = widget.grid_info()['column']
def drag_motion(event):
    widget = event.widget
    x = widget.winfo_x() - widget.startX + event.x
    y = widget.winfo_y() - widget.startY + event.y
    widget.place(width=CELL_SIZE, height=CELL_SIZE,x=x, y=y)

grid_locations = []


def drop(event,grid_locations):

    widget = event.widget
    new_row = (widget.winfo_y() + CELL_SIZE // 2) // CELL_SIZE
    new_col = (widget.winfo_x() + CELL_SIZE // 2) // CELL_SIZE
    # Limit to a specific grid size (15x15)
    if 0 <= new_row < 15 and 0 <= new_col < 15:
        new_tuple = (new_row,new_col)
        if new_tuple not in grid_locations:
            widget.grid(row=new_row, column=new_col, sticky="nsew")
            grid_location

    elif new_row == 15 and 3 <= new_col <=8:
        widget.grid(row=new_row, column=new_col, sticky="nsew")
    else:
        # Revert to original position if out of bounds
        widget.grid(row=widget.original_row, column=widget.original_column, sticky="nsew")
        
        

window = tk.Tk()
window.title("Grid")
window.geometry("750x800")

# Configure the grid to have fixed cell sizes
for i in range(16): # Set minimum size for columns
    window.rowconfigure(i, weight=1, minsize=CELL_SIZE) # Set minimum size for rows
for i in range(15):
    window.columnconfigure(i, weight=1, minsize=CELL_SIZE)   # Set minimum size for columns

#Create Background colour for the grid
colour_list = []
colours = ["blue","light green"]
label = ttk.Label(window, background=random.choice(colours))
label.place(width=CELL_SIZE, height=CELL_SIZE) 
for i in range(15):
    for j in range(15):
        bg = random.choice(colours)
        if len(colour_list) != 0:
            while bg == colour_list[-1]:
                bg = random.choice(colours)
            if len(colour_list) > 15:
                while bg == colour_list[-15]:
                    bg = random.choice(colours)


        colour_list.append(bg)
        label = ttk.Label(window, background=bg)

        label.place(width=CELL_SIZE, height=CELL_SIZE)
        label.grid(row=i, column=j, sticky="nsew")


#create hand

swap_button = ttk.Button(window, text="Swap",)
swap_button.place(width=CELL_SIZE, height=CELL_SIZE)
swap_button.grid(row=15 , column=0 , sticky="nsew")

skip_button = ttk.Button(window , text="Skip")
skip_button.place(width=CELL_SIZE, height=CELL_SIZE)
skip_button.grid(row=15 , column=1 , sticky="nsew")

shuffle_button = ttk.Button(window , text="Shuffle")
shuffle_button.place(width=CELL_SIZE, height=CELL_SIZE)
shuffle_button.grid(row=15 , column=2 , sticky="nsew")

colours = ["magenta","red","purple","pink"]

for j in range(3,8):
        label = ttk.Label(window, background=random.choice(colours))
        label.place(width=CELL_SIZE, height=CELL_SIZE)
        label.grid(row=15, column=j, sticky="nsew")










# Create tiles 

tile_bag = (
    ["A"] * 9 + ["B"] * 2 + ["C"] * 2 + ["D"] * 4 + ["E"] * 12 +
    ["F"] * 2 + ["G"] * 3 + ["H"] * 2 + ["I"] * 9 + ["J"] * 1 +
    ["K"] * 1 + ["L"] * 4 + ["M"] * 2 + ["N"] * 6 + ["O"] * 8 +
    ["P"] * 2 + ["Q"] * 1 + ["R"] * 6 + ["S"] * 4 + ["T"] * 6 +
    ["U"] * 4 + ["V"] * 2 + ["W"] * 2 + ["X"] * 1 + ["Y"] * 2 + ["Z"] * 1)
list(tile_bag)
tile_bag_amount = 99
score = {letter: score for letter, score in zip(
    "ABCDEFGHIJKLMNOPQRSTUVWXYZ", [1, 3, 3, 2, 1, 4, 2, 4, 1, 8, 5, 1, 3, 1, 1, 3, 10, 1, 1, 1, 1, 4, 4, 8, 4, 10])}




def check_hand():
 for widget in window.grid_slaves(1,5):
    if type(widget) == label:
        continue
    if widget["text"] == "" :
        create_tile(tile_bag,tile_bag_amount)




def create_tile(tile_bag,tile_bag_amount):

    #randomly get a letter from the tile back and delete from the tile bag
    num = random.randint(0,tile_bag_amount)
    tile_bag_amount = tile_bag_amount - 1
    letter = tile_bag.pop(num)
    
    #create the tile with the specified Letter
    Tile = ttk.Label(window, text=letter, background="white")
    Tile.place(width=CELL_SIZE, height=CELL_SIZE)
    

    Tile.grid(row=1, column=5, sticky="nsew",pady=5, padx=5)
    


    Tile.bind("<Button-1>", drag_start)
    Tile.bind("<B1-Motion>", drag_motion)
    Tile.bind("<ButtonRelease-1>", drop)









Tile1= ttk.Label(window, text="Tile 1", background="white")
Tile1.place(width=CELL_SIZE, height=CELL_SIZE)  # Set explicit pixel size

Tile2 = ttk.Label(window, text="Tile 2", background="white")
Tile2.place(width=CELL_SIZE, height=CELL_SIZE)  # Set explicit pixel sizelabel.grid(row=2, column=1, sticky="nsew")

# Initial positions in the grid
Tile1.grid(row=0, column=0, sticky="nsew",pady=5, padx=5)
Tile2.grid(row=1, column=1, sticky="nsew",pady=5, padx=5)

Tile1.bind("<Button-1>", drag_start)
Tile1.bind("<B1-Motion>", drag_motion)
Tile1.bind("<ButtonRelease-1>", drop)

Tile2.bind("<Button-1>", drag_start)
Tile2.bind("<B1-Motion>", drag_motion)
Tile2.bind("<ButtonRelease-1>", drop)

check_hand()

window.mainloop()
